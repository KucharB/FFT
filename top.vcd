$date
	Wed Dec 18 14:57:09 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_fft_tb $end
$var wire 1 ! o_AWVALID $end
$var wire 32 " o_AWDATA [31:0] $end
$var wire 2 # o_AWBURST [1:0] $end
$var wire 1 $ o_ARREADY $end
$var wire 2 % o_ARBURST [1:0] $end
$var reg 1 & MAC_nRADIX $end
$var reg 16 ' i_ARDATA [15:0] $end
$var reg 1 ( i_ARVALID $end
$var reg 1 ) i_AWREADY $end
$var reg 12 * i_SAMPLES_NUMBER [11:0] $end
$var reg 1 + i_clk $end
$var reg 1 , i_rstn $end
$scope module dut $end
$var wire 1 & MAC_nRADIX $end
$var wire 16 - RDATA [15:0] $end
$var wire 1 ( RVALID $end
$var wire 12 . SAMP_NUMBER [11:0] $end
$var wire 1 ) WREADY $end
$var wire 1 + clk $end
$var wire 1 , n_Reset $end
$var wire 1 / ram_to_cache $end
$var wire 1 0 l_nComp $end
$var wire 2 1 fsm_state [1:0] $end
$var wire 1 2 device_clear $end
$var wire 1 3 counter_n_ovf $end
$var wire 1 4 counter_n_en $end
$var wire 1 5 counter_k_en $end
$var wire 1 ! WVALID $end
$var wire 1 6 WRITE_ram $end
$var wire 32 7 WDATA [31:0] $end
$var wire 2 8 WBURST [1:0] $end
$var wire 16 9 TW_VAL_REAL [15:0] $end
$var wire 16 : TW_VAL_IMAG [15:0] $end
$var wire 32 ; SEND_DATA [31:0] $end
$var wire 12 < SEND_ADDR [11:0] $end
$var wire 12 = SAMPLE_INDEX_ram [11:0] $end
$var wire 1 $ RREADY $end
$var wire 1 > READ_ram $end
$var wire 2 ? RBURST [1:0] $end
$var wire 16 @ RAM_in_axi [15:0] $end
$var wire 12 A N_INDEX [11:0] $end
$var wire 32 B MUL_REAL_RESULT [31:0] $end
$var wire 32 C MUL_IMAG_RESULT [31:0] $end
$var wire 1 D LOADED_DATA $end
$var wire 32 E DATA_FROM_RAM [31:0] $end
$var wire 1 F CALC_END $end
$var wire 16 G CACHE_DATA_OUT [15:0] $end
$var wire 16 H CACHE_DATA_IN [15:0] $end
$var wire 32 I ACUMULATION_INPUT [31:0] $end
$scope module acumulation $end
$var wire 1 + clk $end
$var wire 32 J val_a [31:0] $end
$var wire 1 2 nrst $end
$var wire 1 5 ce $end
$var reg 16 K accumulated_val_imag [15:0] $end
$var reg 16 L accumulated_val_real [15:0] $end
$var reg 32 M val_out [31:0] $end
$upscope $end
$scope module c_mem $end
$var wire 1 + clk $end
$var wire 12 N write_adr [11:0] $end
$var wire 1 / write $end
$var wire 12 O shifted_write_adr [11:0] $end
$var wire 12 P read_adr [11:0] $end
$var wire 16 Q data_in [15:0] $end
$var reg 16 R read_data [15:0] $end
$scope module d1 $end
$var wire 1 + clk $end
$var wire 12 S d [11:0] $end
$var reg 12 T q [11:0] $end
$upscope $end
$upscope $end
$scope module finit_state $end
$var wire 1 & ce $end
$var wire 1 + clk $end
$var wire 1 , nrst $end
$var wire 12 U sample_num [11:0] $end
$var wire 2 V state [1:0] $end
$var wire 1 3 data_to_cache_loaded $end
$var wire 1 D data_loaded $end
$var wire 1 F calc_end $end
$var reg 1 2 clear $end
$var reg 1 5 count_k_en $end
$var reg 1 4 count_n_en $end
$var reg 1 0 load_nCompute $end
$var reg 1 / load_to_cache $end
$var reg 2 W states [1:0] $end
$upscope $end
$scope module k_counter $end
$var wire 1 X ce $end
$var wire 1 + clk $end
$var wire 12 Y max_val [11:0] $end
$var wire 1 2 nrst $end
$var reg 12 Z coun_val [11:0] $end
$var reg 12 [ o_data [11:0] $end
$var reg 1 F over $end
$upscope $end
$scope module mul_imag $end
$var wire 16 \ a_val [15:0] $end
$var wire 16 ] b_val [15:0] $end
$var reg 32 ^ result [31:0] $end
$upscope $end
$scope module mul_real $end
$var wire 16 _ a_val [15:0] $end
$var wire 16 ` b_val [15:0] $end
$var reg 32 a result [31:0] $end
$upscope $end
$scope module n_counter $end
$var wire 1 4 ce $end
$var wire 1 + clk $end
$var wire 12 b max_val [11:0] $end
$var wire 1 2 nrst $end
$var reg 12 c coun_val [11:0] $end
$var reg 12 d o_data [11:0] $end
$var reg 1 3 over $end
$upscope $end
$scope module ram1 $end
$var wire 12 e READ_ADDRESS [11:0] $end
$var wire 12 f SEND_ADDR [11:0] $end
$var wire 32 g SEND_DATA [31:0] $end
$var wire 1 + clk $end
$var wire 1 0 mode $end
$var wire 1 / write_to_cache $end
$var wire 1 6 axi_write $end
$var wire 1 > axi_read $end
$var wire 16 h axi_data_in [15:0] $end
$var wire 12 i axi_adr_in [11:0] $end
$var reg 16 j READ_DATA [15:0] $end
$var reg 32 k axi_data_out [31:0] $end
$upscope $end
$scope module round_imag $end
$var wire 32 l val_in [31:0] $end
$var wire 16 m val_out [15:0] $end
$upscope $end
$scope module round_real $end
$var wire 32 n val_in [31:0] $end
$var wire 16 o val_out [15:0] $end
$upscope $end
$scope module slave $end
$var wire 16 p i_ARDATA [15:0] $end
$var wire 1 ( i_ARVALID $end
$var wire 1 ) i_AWREADY $end
$var wire 1 F i_CALC_END $end
$var wire 32 q i_DATA_FROM_RAM [31:0] $end
$var wire 12 r i_SAMPLES_NUMBER [11:0] $end
$var wire 1 + i_clk $end
$var wire 1 , i_rstn $end
$var reg 12 s index_cnt [11:0] $end
$var reg 2 t next_state [1:0] $end
$var reg 2 u o_ARBURST [1:0] $end
$var reg 1 $ o_ARREADY $end
$var reg 2 v o_AWBURST [1:0] $end
$var reg 32 w o_AWDATA [31:0] $end
$var reg 1 ! o_AWVALID $end
$var reg 1 D o_DATA_LOADED $end
$var reg 1 > o_READ_ram $end
$var reg 12 x o_SAMPLE_INDEX_ram [11:0] $end
$var reg 16 y o_SAMPLE_ram [15:0] $end
$var reg 1 6 o_WRITE_ram $end
$var reg 2 z state [1:0] $end
$var reg 1 { cnt_clr $end
$var reg 1 | cnt_en $end
$scope begin p_fsm_comb $end
$upscope $end
$scope begin p_fsm_sync $end
$upscope $end
$upscope $end
$scope module tw_gen $end
$var wire 12 } N [11:0] $end
$var wire 1 + clk $end
$var wire 12 ~ k_index [11:0] $end
$var wire 12 !" n_index [11:0] $end
$var reg 12 "" addr [11:0] $end
$var reg 32 #" data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx #"
bx ""
bx !"
bx ~
b0 }
0|
0{
b0 z
bx y
bx x
bx w
bx v
bx u
b0 t
b0 s
b0 r
bx q
b0 p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
b0 b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
b0 Y
xX
bx W
bx V
b0 U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
xF
bx E
0D
bx C
bx B
bx A
bx @
bx ?
0>
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
06
x5
x4
x3
x2
bx 1
x0
x/
b0 .
b0 -
0,
0+
b0 *
x)
x(
b0 '
1&
bx %
1$
bx #
bx "
0!
$end
#5000
0X
0/
02
05
04
10
b0 1
b0 V
b0 W
1$
b1 '
b1 -
b1 p
1+
#10000
1,
0+
#15000
b0 ""
b0 <
b0 [
b0 f
b0 ~
b0 A
b0 N
b0 P
b0 S
b0 d
b0 e
b0 !"
b0 ;
b0 M
b0 g
0F
b0 Z
03
b0 c
b0 K
b0 L
b1 t
1$
b10 '
b10 -
b10 p
1(
b11 *
b11 .
b11 U
b11 Y
b11 b
b11 r
b11 }
1+
#20000
0+
#25000
b0 m
b0 I
b0 J
b0 o
b0 C
b0 ^
b0 l
b0 B
b0 a
b0 n
b0 :
b0 ]
b111111111111111 9
b111111111111111 `
1|
b11 @
b11 h
b11 y
b0 =
b0 i
b0 x
16
b0 O
b0 T
b0 G
b0 R
b0 \
b0 _
b1111111111111110000000000000000 #"
b1 z
1$
b11 '
b11 -
b11 p
1+
#30000
0+
#35000
b1 s
b100 @
b100 h
b100 y
b1 =
b1 i
b1 x
1|
1$
16
b100 '
b100 -
b100 p
1+
#40000
0+
#45000
1{
b11 t
1D
b10 s
b101 @
b101 h
b101 y
b10 =
b10 i
b10 x
0|
1$
16
1)
0(
b101 '
b101 -
b101 p
1+
#50000
0+
#55000
1!
00
12
b1 1
b1 V
b1 W
b0 s
b11 z
bx @
bx h
bx y
bx =
bx i
bx x
0{
0$
06
0D
b110 '
b110 -
b110 p
1+
#60000
0+
#65000
14
1/
1!
b111 '
b111 -
b111 p
1+
#70000
0+
#75000
b1 A
b1 N
b1 P
b1 S
b1 d
b1 e
b1 !"
b1 c
b0 H
b0 Q
b0 j
1!
b1000 '
b1000 -
b1000 p
1+
#80000
0+
#85000
b10 A
b10 N
b10 P
b10 S
b10 d
b10 e
b10 !"
b100 H
b100 Q
b100 j
b1 O
b1 T
b10 c
1!
b1001 '
b1001 -
b1001 p
1+
#90000
0+
#95000
13
b10 O
b10 T
b101 H
b101 Q
b101 j
1!
b1010 '
b1010 -
b1010 p
1+
#100000
0+
#105000
02
b10 1
b10 V
b10 W
1!
b1011 '
b1011 -
b1011 p
1+
#110000
0+
#115000
b0 A
b0 N
b0 P
b0 S
b0 d
b0 e
b0 !"
b11 1
b11 V
b11 W
15
12
0/
03
b0 c
1!
b1100 '
b1100 -
b1100 p
1+
#120000
0+
#125000
b1 A
b1 N
b1 P
b1 S
b1 d
b1 e
b1 !"
b0 O
b0 T
b1 c
1!
b1101 '
b1101 -
b1101 p
1+
#130000
0+
#135000
b10000000000000000 I
b10000000000000000 J
b1 o
b10 A
b10 N
b10 P
b10 S
b10 d
b10 e
b10 !"
b11111111111111100 B
b11111111111111100 a
b11111111111111100 n
b10 c
b100 G
b100 R
b100 \
b100 _
b1 O
b1 T
1!
b1110 '
b1110 -
b1110 p
1+
#140000
0+
#145000
b100000000000000000 I
b100000000000000000 J
b10 o
b100111111111111011 B
b100111111111111011 a
b100111111111111011 n
b10000000000000000 ;
b10000000000000000 M
b10000000000000000 g
1X
b10 O
b10 T
b101 G
b101 R
b101 \
b101 _
b1 L
13
1!
b1111 '
b1111 -
b1111 p
1+
#150000
0+
#155000
b101010101010 ""
b1 <
b1 [
b1 f
b1 ~
b110000000000000000 ;
b110000000000000000 M
b110000000000000000 g
b1 Z
b11 L
1!
b10000 '
b10000 -
b10000 p
1+
#160000
0+
#165000
b11 o
b110000000000000010 I
b110000000000000010 J
b10 m
b10101010100 ""
b111011111101101111 B
b111011111101101111 a
b111011111101101111 n
b100010100111101000 C
b100010100111101000 ^
b100010100111101000 l
b1010000000000000000 ;
b1010000000000000000 M
b1010000000000000000 g
b10 <
b10 [
b10 f
b10 ~
b110111011001000 :
b110111011001000 ]
b1011111111100011 9
b1011111111100011 `
b101 L
b10 Z
b10111111111000110110111011001000 #"
1!
b10001 '
b10001 -
b10001 p
1+
#170000
0+
#175000
b101101010100011001 C
b101101010100011001 ^
b101101010100011001 l
b111100000100100111 B
b111100000100100111 a
b111100000100100111 n
b1001000100000101 :
b1001000100000101 ]
b1100000000111011 9
b1100000000111011 `
b10 t
b10000000000000000010 ;
b10000000000000000010 M
b10000000000000000010 g
b11000000001110111001000100000101 #"
1F
b10 K
b1000 L
1!
b10010 '
b10010 -
b10010 p
1+
#180000
0+
#185000
b10110000000000000100 ;
b10110000000000000100 M
b10110000000000000100 g
0X
1|
b0 =
b0 i
b0 x
1>
b100 K
b1011 L
05
04
10
b0 1
b0 V
b0 W
b10 z
1!
b10011 '
b10011 -
b10011 p
1+
#190000
0+
#195000
b10000000000000000 "
b10000000000000000 7
b10000000000000000 w
b10000000000000000 E
b10000000000000000 k
b10000000000000000 q
b1 s
b1 =
b1 i
b1 x
1|
1!
1>
b10100 '
b10100 -
b10100 p
1+
#200000
0+
#205000
b0 t
1{
b110000000000000000 E
b110000000000000000 k
b110000000000000000 q
b10 s
b110000000000000000 "
b110000000000000000 7
b110000000000000000 w
b10 =
b10 i
b10 x
0|
1!
1>
b10101 '
b10101 -
b10101 p
1+
#210000
0+
#215000
1$
b10000000000000000010 E
b10000000000000000010 k
b10000000000000000010 q
b0 s
b0 z
bx "
bx 7
bx w
bx =
bx i
bx x
0{
0!
0>
b10110 '
b10110 -
b10110 p
1+
#220000
0+
#225000
1$
b10111 '
b10111 -
b10111 p
1+
#230000
0+
#235000
1$
b11000 '
b11000 -
b11000 p
1+
#240000
0+
#245000
1$
b11001 '
b11001 -
b11001 p
1+
#250000
0+
#255000
1$
b11010 '
b11010 -
b11010 p
1+
#260000
0+
#265000
1$
b11011 '
b11011 -
b11011 p
1+
#270000
0+
#275000
1$
b11100 '
b11100 -
b11100 p
1+
#280000
0+
#285000
1$
b11101 '
b11101 -
b11101 p
1+
#290000
0+
#295000
1$
b11110 '
b11110 -
b11110 p
1+
#300000
0+
#305000
1$
b11111 '
b11111 -
b11111 p
1+
#310000
0+
#315000
1$
b100000 '
b100000 -
b100000 p
1+
#320000
0+
#325000
1$
b100001 '
b100001 -
b100001 p
1+
#330000
0+
#335000
1$
b100010 '
b100010 -
b100010 p
1+
#340000
0+
#345000
1$
b100011 '
b100011 -
b100011 p
1+
#350000
0+
#355000
1$
b100100 '
b100100 -
b100100 p
1+
#360000
0+
#365000
1$
b100101 '
b100101 -
b100101 p
1+
#370000
0+
#375000
1$
b100110 '
b100110 -
b100110 p
1+
#380000
0+
#385000
1$
b100111 '
b100111 -
b100111 p
1+
#390000
0+
#395000
1$
b101000 '
b101000 -
b101000 p
1+
#400000
0+
#405000
1$
b101001 '
b101001 -
b101001 p
1+
#410000
0+
#415000
1$
b101010 '
b101010 -
b101010 p
1+
#420000
0+
#425000
1$
b101011 '
b101011 -
b101011 p
1+
#430000
0+
#435000
1$
b101100 '
b101100 -
b101100 p
1+
#440000
0+
#445000
1$
b101101 '
b101101 -
b101101 p
1+
#450000
0+
#455000
1$
b101110 '
b101110 -
b101110 p
1+
#460000
0+
#465000
1$
b101111 '
b101111 -
b101111 p
1+
#470000
0+
#475000
1$
b110000 '
b110000 -
b110000 p
1+
#480000
0+
#485000
1$
b110001 '
b110001 -
b110001 p
1+
#490000
0+
#495000
1$
b110010 '
b110010 -
b110010 p
1+
#500000
0+
#505000
1$
b110011 '
b110011 -
b110011 p
1+
#510000
0+
#515000
1$
b110100 '
b110100 -
b110100 p
1+
#520000
0+
#525000
1$
b110101 '
b110101 -
b110101 p
1+
#530000
0+
#535000
1$
b110110 '
b110110 -
b110110 p
1+
#540000
0+
#545000
1$
b110111 '
b110111 -
b110111 p
1+
#550000
0+
#555000
1$
b111000 '
b111000 -
b111000 p
1+
#560000
0+
#565000
1$
b111001 '
b111001 -
b111001 p
1+
