$date
	Wed Dec 18 23:04:55 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_fft_tb $end
$var wire 1 ! o_AWVALID $end
$var wire 32 " o_AWDATA [31:0] $end
$var wire 2 # o_AWBURST [1:0] $end
$var wire 1 $ o_ARREADY $end
$var wire 2 % o_ARBURST [1:0] $end
$var parameter 32 & DATA_WIDTH $end
$var reg 1 ' MAC_nRADIX $end
$var reg 16 ( i_ARDATA [15:0] $end
$var reg 1 ) i_ARVALID $end
$var reg 1 * i_AWREADY $end
$var reg 12 + i_SAMPLES_NUMBER [11:0] $end
$var reg 1 , i_clk $end
$var reg 1 - i_rstn $end
$scope module dut $end
$var wire 1 ' MAC_nRADIX $end
$var wire 16 . RDATA [15:0] $end
$var wire 1 ) RVALID $end
$var wire 12 / SAMP_NUMBER [11:0] $end
$var wire 1 * WREADY $end
$var wire 1 , clk $end
$var wire 1 - n_Reset $end
$var wire 1 0 ram_to_cache $end
$var wire 1 1 l_nComp $end
$var wire 2 2 fsm_state [1:0] $end
$var wire 1 3 device_clear $end
$var wire 1 4 counter_n_ovf $end
$var wire 1 5 counter_n_en $end
$var wire 1 6 counter_k_en $end
$var wire 1 ! WVALID $end
$var wire 1 7 WRITE_ram $end
$var wire 32 8 WDATA [31:0] $end
$var wire 2 9 WBURST [1:0] $end
$var wire 16 : TW_VAL_REAL [15:0] $end
$var wire 16 ; TW_VAL_IMAG [15:0] $end
$var wire 32 < SEND_DATA [31:0] $end
$var wire 12 = SEND_ADDR [11:0] $end
$var wire 12 > SAMPLE_INDEX_ram [11:0] $end
$var wire 1 $ RREADY $end
$var wire 1 ? READ_ram $end
$var wire 2 @ RBURST [1:0] $end
$var wire 16 A RAM_in_axi [15:0] $end
$var wire 12 B N_INDEX [11:0] $end
$var wire 32 C MUL_REAL_RESULT [31:0] $end
$var wire 32 D MUL_IMAG_RESULT [31:0] $end
$var wire 1 E LOADED_DATA $end
$var wire 32 F DATA_FROM_RAM [31:0] $end
$var wire 1 G CALC_END $end
$var wire 16 H CACHE_DATA_OUT [15:0] $end
$var wire 16 I CACHE_DATA_IN [15:0] $end
$var wire 32 J ACUMULATION_INPUT [31:0] $end
$var parameter 32 K N $end
$scope module acumulation $end
$var wire 1 , clk $end
$var wire 32 L val_a [31:0] $end
$var wire 1 3 nrst $end
$var wire 1 6 ce $end
$var reg 16 M accumulated_val_imag [15:0] $end
$var reg 16 N accumulated_val_real [15:0] $end
$var reg 32 O val_out [31:0] $end
$upscope $end
$scope module c_mem $end
$var wire 1 , clk $end
$var wire 12 P write_adr [11:0] $end
$var wire 1 0 write $end
$var wire 12 Q shifted_write_adr [11:0] $end
$var wire 12 R read_adr [11:0] $end
$var wire 16 S data_in [15:0] $end
$var reg 16 T read_data [15:0] $end
$scope module d1 $end
$var wire 1 , clk $end
$var wire 12 U d [11:0] $end
$var reg 12 V q [11:0] $end
$upscope $end
$upscope $end
$scope module finit_state $end
$var wire 1 ' ce $end
$var wire 1 , clk $end
$var wire 1 - nrst $end
$var wire 12 W sample_num [11:0] $end
$var wire 2 X state [1:0] $end
$var wire 1 4 data_to_cache_loaded $end
$var wire 1 E data_loaded $end
$var wire 1 G calc_end $end
$var parameter 2 Y CLEAR $end
$var parameter 2 Z COMPUTE $end
$var parameter 2 [ IDLE $end
$var parameter 2 \ LOAD_TO_CACHE $end
$var reg 1 3 clear $end
$var reg 1 6 count_k_en $end
$var reg 1 5 count_n_en $end
$var reg 1 1 load_nCompute $end
$var reg 1 0 load_to_cache $end
$var reg 2 ] states [1:0] $end
$upscope $end
$scope module k_counter $end
$var wire 1 ^ ce $end
$var wire 1 , clk $end
$var wire 12 _ max_val [11:0] $end
$var wire 1 3 nrst $end
$var reg 12 ` coun_val [11:0] $end
$var reg 12 a o_data [11:0] $end
$var reg 1 G over $end
$upscope $end
$scope module mul_imag $end
$var wire 16 b a_val [15:0] $end
$var wire 16 c b_val [15:0] $end
$var reg 32 d result [31:0] $end
$upscope $end
$scope module mul_real $end
$var wire 16 e a_val [15:0] $end
$var wire 16 f b_val [15:0] $end
$var reg 32 g result [31:0] $end
$upscope $end
$scope module n_counter $end
$var wire 1 5 ce $end
$var wire 1 , clk $end
$var wire 12 h max_val [11:0] $end
$var wire 1 3 nrst $end
$var reg 12 i coun_val [11:0] $end
$var reg 12 j o_data [11:0] $end
$var reg 1 4 over $end
$upscope $end
$scope module ram1 $end
$var wire 12 k READ_ADDRESS [11:0] $end
$var wire 12 l SEND_ADDR [11:0] $end
$var wire 32 m SEND_DATA [31:0] $end
$var wire 1 , clk $end
$var wire 1 1 mode $end
$var wire 1 0 write_to_cache $end
$var wire 1 7 axi_write $end
$var wire 1 ? axi_read $end
$var wire 16 n axi_data_in [15:0] $end
$var wire 12 o axi_adr_in [11:0] $end
$var reg 16 p READ_DATA [15:0] $end
$var reg 32 q axi_data_out [31:0] $end
$upscope $end
$scope module round_imag $end
$var wire 32 r val_in [31:0] $end
$var wire 16 s val_out [15:0] $end
$upscope $end
$scope module round_real $end
$var wire 32 t val_in [31:0] $end
$var wire 16 u val_out [15:0] $end
$upscope $end
$scope module slave $end
$var wire 16 v i_ARDATA [15:0] $end
$var wire 1 ) i_ARVALID $end
$var wire 1 * i_AWREADY $end
$var wire 1 G i_CALC_END $end
$var wire 32 w i_DATA_FROM_RAM [31:0] $end
$var wire 12 x i_SAMPLES_NUMBER [11:0] $end
$var wire 1 , i_clk $end
$var wire 1 - i_rstn $end
$var parameter 32 y DATA_WIDTH $end
$var reg 12 z index_cnt [11:0] $end
$var reg 2 { next_state [1:0] $end
$var reg 2 | o_ARBURST [1:0] $end
$var reg 1 $ o_ARREADY $end
$var reg 2 } o_AWBURST [1:0] $end
$var reg 32 ~ o_AWDATA [31:0] $end
$var reg 1 ! o_AWVALID $end
$var reg 1 E o_DATA_LOADED $end
$var reg 1 ? o_READ_ram $end
$var reg 12 !" o_SAMPLE_INDEX_ram [11:0] $end
$var reg 16 "" o_SAMPLE_ram [15:0] $end
$var reg 1 7 o_WRITE_ram $end
$var reg 2 #" state [1:0] $end
$var reg 1 $" cnt_clr $end
$var reg 1 %" cnt_en $end
$scope begin p_fsm_comb $end
$upscope $end
$scope begin p_fsm_sync $end
$upscope $end
$upscope $end
$scope module tw_gen $end
$var wire 12 &" N [11:0] $end
$var wire 1 , clk $end
$var wire 12 '" k_index [11:0] $end
$var wire 12 (" n_index [11:0] $end
$var parameter 32 )" DEPTH $end
$var parameter 32 *" WIDTH $end
$var reg 12 +" addr [11:0] $end
$var reg 32 ," data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 *"
b1000000000000 )"
b100000 y
b1 \
b0 [
b11 Z
b10 Y
b10 K
b100000 &
$end
#0
$dumpvars
bx ,"
bx +"
bx ("
bx '"
b0 &"
0%"
0$"
b0 #"
bx ""
bx !"
bx ~
bx }
bx |
b0 {
b0 z
b0 x
bx w
b0 v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
b0 h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
x^
bx ]
bx X
b0 W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx J
bx I
bx H
xG
bx F
0E
bx D
bx C
bx B
bx A
bx @
0?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
07
x6
x5
x4
x3
bx 2
x1
x0
b0 /
b0 .
0-
0,
b0 +
x*
x)
b0 (
1'
bx %
1$
bx #
bx "
0!
$end
#5000
0^
00
03
06
05
11
b0 2
b0 X
b0 ]
1$
b1 (
b1 .
b1 v
1,
#10000
1-
0,
#15000
b0 +"
b0 =
b0 a
b0 l
b0 '"
b0 B
b0 P
b0 R
b0 U
b0 j
b0 k
b0 ("
b0 <
b0 O
b0 m
0G
b0 `
04
b0 i
b0 M
b0 N
b1 {
1$
b10 (
b10 .
b10 v
1)
b11 +
b11 /
b11 W
b11 _
b11 h
b11 x
b11 &"
1,
#20000
0,
#25000
b0 s
b0 J
b0 L
b0 u
b0 D
b0 d
b0 r
b0 C
b0 g
b0 t
b0 ;
b0 c
b111111111111111 :
b111111111111111 f
1%"
b11 A
b11 n
b11 ""
b0 >
b0 o
b0 !"
17
b0 Q
b0 V
b0 H
b0 T
b0 b
b0 e
b1111111111111110000000000000000 ,"
b1 #"
1$
b11 (
b11 .
b11 v
1,
#30000
0,
#35000
b1 z
b100 A
b100 n
b100 ""
b1 >
b1 o
b1 !"
1%"
1$
17
b100 (
b100 .
b100 v
1,
#40000
0,
#45000
1$"
b11 {
1E
b10 z
b101 A
b101 n
b101 ""
b10 >
b10 o
b10 !"
0%"
1$
17
1*
0)
b101 (
b101 .
b101 v
1,
#50000
0,
#55000
1!
01
13
b1 2
b1 X
b1 ]
b0 z
b11 #"
bx A
bx n
bx ""
bx >
bx o
bx !"
0$"
0$
07
0E
b110 (
b110 .
b110 v
1,
#60000
0,
#65000
15
10
1!
b111 (
b111 .
b111 v
1,
#70000
0,
#75000
b1 B
b1 P
b1 R
b1 U
b1 j
b1 k
b1 ("
b1 i
b0 I
b0 S
b0 p
1!
b1000 (
b1000 .
b1000 v
1,
#80000
0,
#85000
b10 B
b10 P
b10 R
b10 U
b10 j
b10 k
b10 ("
b100 I
b100 S
b100 p
b1 Q
b1 V
b10 i
1!
b1001 (
b1001 .
b1001 v
1,
#90000
0,
#95000
14
b10 Q
b10 V
b101 I
b101 S
b101 p
1!
b1010 (
b1010 .
b1010 v
1,
#100000
0,
#105000
03
b10 2
b10 X
b10 ]
1!
b1011 (
b1011 .
b1011 v
1,
#110000
0,
#115000
b0 B
b0 P
b0 R
b0 U
b0 j
b0 k
b0 ("
b11 2
b11 X
b11 ]
16
13
00
04
b0 i
1!
b1100 (
b1100 .
b1100 v
1,
#120000
0,
#125000
b1 B
b1 P
b1 R
b1 U
b1 j
b1 k
b1 ("
b0 Q
b0 V
b1 i
1!
b1101 (
b1101 .
b1101 v
1,
#130000
0,
#135000
b10000000000000000 J
b10000000000000000 L
b1 u
b10 B
b10 P
b10 R
b10 U
b10 j
b10 k
b10 ("
b11111111111111100 C
b11111111111111100 g
b11111111111111100 t
b10 i
b100 H
b100 T
b100 b
b100 e
b1 Q
b1 V
1!
b1110 (
b1110 .
b1110 v
1,
#140000
0,
#145000
b100000000000000000 J
b100000000000000000 L
b10 u
b100111111111111011 C
b100111111111111011 g
b100111111111111011 t
b10000000000000000 <
b10000000000000000 O
b10000000000000000 m
1^
b10 Q
b10 V
b101 H
b101 T
b101 b
b101 e
b1 N
14
1!
b1111 (
b1111 .
b1111 v
1,
#150000
0,
#155000
b101010101010 +"
b1 =
b1 a
b1 l
b1 '"
b110000000000000000 <
b110000000000000000 O
b110000000000000000 m
b1 `
b11 N
1!
b10000 (
b10000 .
b10000 v
1,
#160000
0,
#165000
b10 s
b110000000000000010 J
b110000000000000010 L
b11 u
b10101010100 +"
b100010100111101000 D
b100010100111101000 d
b100010100111101000 r
b111011111101101111 C
b111011111101101111 g
b111011111101101111 t
b1010000000000000000 <
b1010000000000000000 O
b1010000000000000000 m
b10 =
b10 a
b10 l
b10 '"
b110111011001000 ;
b110111011001000 c
b1011111111100011 :
b1011111111100011 f
b101 N
b10 `
b10111111111000110110111011001000 ,"
1!
b10001 (
b10001 .
b10001 v
1,
#170000
0,
#175000
b101101010100011001 D
b101101010100011001 d
b101101010100011001 r
b111100000100100111 C
b111100000100100111 g
b111100000100100111 t
b1001000100000101 ;
b1001000100000101 c
b1100000000111011 :
b1100000000111011 f
b10 {
b10000000000000000010 <
b10000000000000000010 O
b10000000000000000010 m
b11000000001110111001000100000101 ,"
1G
b10 M
b1000 N
1!
b10010 (
b10010 .
b10010 v
1,
#180000
0,
#185000
b10110000000000000100 <
b10110000000000000100 O
b10110000000000000100 m
0^
1%"
b0 >
b0 o
b0 !"
1?
b100 M
b1011 N
06
05
11
b0 2
b0 X
b0 ]
b10 #"
1!
b10011 (
b10011 .
b10011 v
1,
#190000
0,
#195000
b10000000000000000 "
b10000000000000000 8
b10000000000000000 ~
b10000000000000000 F
b10000000000000000 q
b10000000000000000 w
b1 z
b1 >
b1 o
b1 !"
1%"
1!
1?
b10100 (
b10100 .
b10100 v
1,
#200000
0,
#205000
b0 {
1$"
b110000000000000000 F
b110000000000000000 q
b110000000000000000 w
b10 z
b110000000000000000 "
b110000000000000000 8
b110000000000000000 ~
b10 >
b10 o
b10 !"
0%"
1!
1?
b10101 (
b10101 .
b10101 v
1,
#210000
0,
#215000
1$
b10000000000000000010 F
b10000000000000000010 q
b10000000000000000010 w
b0 z
b0 #"
bx "
bx 8
bx ~
bx >
bx o
bx !"
0$"
0!
0?
b10110 (
b10110 .
b10110 v
1,
#220000
0,
#225000
1$
b10111 (
b10111 .
b10111 v
1,
#230000
0,
#235000
1$
b11000 (
b11000 .
b11000 v
1,
#240000
0,
#245000
1$
b11001 (
b11001 .
b11001 v
1,
#250000
0,
#255000
1$
b11010 (
b11010 .
b11010 v
1,
#260000
0,
#265000
1$
b11011 (
b11011 .
b11011 v
1,
#270000
0,
#275000
1$
b11100 (
b11100 .
b11100 v
1,
#280000
0,
#285000
1$
b11101 (
b11101 .
b11101 v
1,
#290000
0,
#295000
1$
b11110 (
b11110 .
b11110 v
1,
#300000
0,
#305000
1$
b11111 (
b11111 .
b11111 v
1,
#310000
0,
#315000
1$
b100000 (
b100000 .
b100000 v
1,
#320000
0,
#325000
1$
b100001 (
b100001 .
b100001 v
1,
#330000
0,
#335000
1$
b100010 (
b100010 .
b100010 v
1,
#340000
0,
#345000
1$
b100011 (
b100011 .
b100011 v
1,
#350000
0,
#355000
1$
b100100 (
b100100 .
b100100 v
1,
#360000
0,
#365000
1$
b100101 (
b100101 .
b100101 v
1,
#370000
0,
#375000
1$
b100110 (
b100110 .
b100110 v
1,
#380000
0,
#385000
1$
b100111 (
b100111 .
b100111 v
1,
#390000
0,
#395000
1$
b101000 (
b101000 .
b101000 v
1,
#400000
0,
#405000
1$
b101001 (
b101001 .
b101001 v
1,
#410000
0,
#415000
1$
b101010 (
b101010 .
b101010 v
1,
#420000
0,
#425000
1$
b101011 (
b101011 .
b101011 v
1,
#430000
0,
#435000
1$
b101100 (
b101100 .
b101100 v
1,
#440000
0,
#445000
1$
b101101 (
b101101 .
b101101 v
1,
#450000
0,
#455000
1$
b101110 (
b101110 .
b101110 v
1,
#460000
0,
#465000
1$
b101111 (
b101111 .
b101111 v
1,
#470000
0,
#475000
1$
b110000 (
b110000 .
b110000 v
1,
#480000
0,
#485000
1$
b110001 (
b110001 .
b110001 v
1,
#490000
0,
#495000
1$
b110010 (
b110010 .
b110010 v
1,
#500000
0,
#505000
1$
b110011 (
b110011 .
b110011 v
1,
#510000
0,
#515000
1$
b110100 (
b110100 .
b110100 v
1,
#520000
0,
#525000
1$
b110101 (
b110101 .
b110101 v
1,
#530000
0,
#535000
1$
b110110 (
b110110 .
b110110 v
1,
#540000
0,
#545000
1$
b110111 (
b110111 .
b110111 v
1,
#550000
0,
#555000
1$
b111000 (
b111000 .
b111000 v
1,
#560000
0,
#565000
1$
b111001 (
b111001 .
b111001 v
1,
